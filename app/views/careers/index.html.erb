<h2 class='white-header text-dark text-center fw-bold p-3'>Your Careers</h2>
<div class="background"></div>
<div class="container">
  <style>
    #graph {
      margin: 0;
    }
  </style>

  <script style="height: 400px;" src="//unpkg.com/force-graph"></script>


  <div id="graph"></div>

  <script>
    fetch('graph.json')
    .then(res => res.json())
    .then(data => {
      const Graph = ForceGraph()
      (document.getElementById('graph'))
      .graphData(data)
      .nodeId('id')
      .nodeVal('val')
      .nodeLabel('id')
      .linkSource('source')
      .linkTarget('target')
      .linkDirectionalParticles(2)
      .nodeRelSize(12)
      .height(300)
      .width(1116)
      .nodeAutoColorBy('id')
      .onNodeClick(node => { // Center/zoom on node
      Graph.centerAt(node.x, node.y, 1000);
      Graph.zoom(4, 1000)
      })
            .nodeCanvasObject((node, ctx, globalScale) => {
        const label = node.id;
        const fontSize = 12/globalScale;
        ctx.font = `${fontSize}px Sans-Serif`;
        const textWidth = ctx.measureText(label).width;
        const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.2); // some padding

        ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
        ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);

        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillStyle = node.color;
        ctx.fillText(label, node.x, node.y);

        node.__bckgDimensions = bckgDimensions; // to re-use in nodePointerAreaPaint
      });
      .nodePointerAreaPaint((node, color, ctx) => {
        ctx.fillStyle = color;
        const bckgDimensions = node.__bckgDimensions;
        bckgDimensions && ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);
      })
    })
  </script>

  <%= render partial: "shared/accordion", locals: {items: @careers} %>
</div>
